{"ast":null,"code":"var _jsxFileName = \"/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [buttonPopup, setButtonPopup] = useState(false);\n  const [word, setWord] = useState([\"\", \"\", \"\", \"\", \"\"]); // 5 letter spots\n  const [wordStatus, setWordStatus] = useState(Array(5).fill(\"null\"));\n\n  // const [guess, setGuess] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);      // 6 guesses\n\n  const letters = [26];\n  const ans = [\"C\", \"O\", \"N\", \"S\", \"T\"];\n  let regex = /^[a-z]$/i; // used to test if keyboard input is a letter\n\n  let navigate = useNavigate();\n  const goToHome = () => {\n    navigate('/Home');\n  };\n  useEffect(() => {\n    // Adding the keydown event listener when the component mounts\n    const letterTyped = event => {\n      if (regex.test(event.key)) {\n        let index = word.indexOf(\"\");\n        if (index !== -1) {\n          const newWord = [...word];\n          newWord[index] = event.key.toUpperCase();\n          setWord(newWord);\n        }\n      } else if (event.key === \"Backspace\" || event.key === \"Delete\") {\n        let delIndex = word.indexOf(\"\");\n\n        // found an empty space, meaning previous index is a letter\n        // don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\n        if (delIndex !== -1 && delIndex !== 0) {\n          const newWord = [...word];\n          newWord[delIndex - 1] = \"\";\n          setWord(newWord);\n        } else\n          // no empty space, meaning array is full\n          {\n            const newWord = [...word];\n            newWord[4] = \"\"; // delete by replacing last index's letter with a empty string\n            setWord(newWord);\n          }\n      } else if (event.key === \"Enter\") {\n        let index = word.indexOf(\"\");\n        if (index === -1) {\n          // Ensure the guess is complete\n\n          // First pass: Mark correct positions as \"correct\"\n          const ansCopy = [...ans]; // Copy of answer for mutable operations\n          const status = [...wordStatus];\n          for (let i = 0; i < word.length; i++) {\n            if (word[i] === ans[i]) {\n              status[i] = \"correct\"; // Mark as correct\n              setWordStatus(status);\n              ansCopy[i] = null; // Remove the matched letter from consideration\n            }\n          }\n\n          // Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\n          word.forEach((letter, i) => {\n            if (status[i] !== \"correct\") {\n              // Skip already correctly matched letters\n              if (ansCopy.includes(letter)) {\n                // If letter is present in the answer but not yet matched, it's potentially yellow\n                // Remove this letter from ansCopy to acknowledge its accounted occurrence\n                const removeIndex = ansCopy.indexOf(letter);\n                ansCopy[removeIndex] = null; // Remove from consideration\n\n                status[i] = \"present\"; // This line is adaptable based on further requirements\n                setWordStatus(status);\n              }\n            }\n          });\n\n          // Reset word for next guess, if implementing multiple guesses\n          // setWord([\"\", \"\", \"\", \"\", \"\"]); // Comment out if you're not ready to reset\n        } else alert(\"Please write a complete word before checking!\"); // ensure full word is entered before check\n      }\n    };\n    window.addEventListener(\"keydown\", letterTyped);\n\n    // Cleanup function to remove the event listener when the component unmounts\n    return () => {\n      window.removeEventListener(\"keydown\", letterTyped);\n    };\n  }, [word]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 h-screen flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full flex justify-between items-center pt-3 px-4 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: goToHome,\n        children: \"Return Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white text-3xl font-sans\",\n        children: \"SWEdle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: () => setButtonPopup(true),\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full border-t-4 border-white pt-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center space-x-4 mt-8 pt-3 pb-4\",\n      children: word.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: ` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${wordStatus[index] === 'correct' ? 'bg-green-500' : wordStatus[index] === 'present' ? 'bg-yellow-500' : wordStatus[index] === 'absent' ? 'bg-red-500' : 'bg-transparent'}`,\n        children: letter\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-24 pb-3 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white font-sans\",\n        children: \"Created by Jonathan Oh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: buttonPopup,\n      setTrigger: setButtonPopup,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl text-white\",\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-white\",\n        children: \"Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 183\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \" A green tile indicates a correct letter and correct position. A yellow tile indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"s3wjnwAZ0cPcVA1dRYO8JeT4d9g=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Popup","jsxDEV","_jsxDEV","Game","_s","buttonPopup","setButtonPopup","word","setWord","wordStatus","setWordStatus","Array","fill","letters","ans","regex","navigate","goToHome","letterTyped","event","test","key","index","indexOf","newWord","toUpperCase","delIndex","ansCopy","status","i","length","forEach","letter","includes","removeIndex","alert","window","addEventListener","removeEventListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","trigger","setTrigger","_c","$RefreshReg$"],"sources":["/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\"; \n\nconst Game = () => {\n\n    const [buttonPopup, setButtonPopup] = useState(false);\n    const [word, setWord] = useState([\"\", \"\", \"\", \"\", \"\"]);         // 5 letter spots\n    const [wordStatus, setWordStatus] = useState(Array(5).fill(\"null\"));\n\n    // const [guess, setGuess] = useState([\"\", \"\", \"\", \"\", \"\", \"\"]);      // 6 guesses\n\n    const letters = [26];\n    const ans = [\"C\", \"O\", \"N\", \"S\", \"T\"];\n\n    let regex = /^[a-z]$/i;     // used to test if keyboard input is a letter\n\n    let navigate = useNavigate();\n    const goToHome = () => {\n        navigate('/Home');\n    };\n\n    useEffect(() => {\n        // Adding the keydown event listener when the component mounts\n        const letterTyped = (event) => {\n            if (regex.test(event.key)) \n            {\n                let index = word.indexOf(\"\");\n                if (index !== -1)\n                {\n                    const newWord = [...word];\n                    newWord[index] = event.key.toUpperCase();\n                    setWord(newWord);\n                }\n            }\n            else if (event.key === \"Backspace\" || event.key === \"Delete\") \n            {\n                let delIndex = word.indexOf(\"\");\n\n                // found an empty space, meaning previous index is a letter\n                // don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\n                if (delIndex !== -1 && delIndex !== 0)        \n                {\n                    const newWord = [...word];\n                    newWord[delIndex - 1] = \"\";\n                    setWord(newWord);\n                }\n                else            // no empty space, meaning array is full\n                {\n                    const newWord = [...word];\n                    newWord[4] = \"\";        // delete by replacing last index's letter with a empty string\n                    setWord(newWord);\n                }\n            }\n            else if (event.key === \"Enter\") {\n                let index = word.indexOf(\"\");\n                if (index === -1) { // Ensure the guess is complete\n                    \n            \n                    // First pass: Mark correct positions as \"correct\"\n                    const ansCopy = [...ans]; // Copy of answer for mutable operations\n                    const status = [...wordStatus];\n\n                    for (let i = 0; i < word.length; i++) {\n                        if (word[i] === ans[i]) \n                        {\n                            status[i] = \"correct\"; // Mark as correct\n                            setWordStatus(status);\n\n                            ansCopy[i] = null; // Remove the matched letter from consideration\n                        }\n                    }\n            \n                    // Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\n                    word.forEach((letter, i) => {\n                        if (status[i] !== \"correct\") { // Skip already correctly matched letters\n                            if (ansCopy.includes(letter)) \n                            {\n                                // If letter is present in the answer but not yet matched, it's potentially yellow\n                                // Remove this letter from ansCopy to acknowledge its accounted occurrence\n                                const removeIndex = ansCopy.indexOf(letter);\n                                ansCopy[removeIndex] = null; // Remove from consideration\n\n                                status[i] = \"present\"; // This line is adaptable based on further requirements\n                                setWordStatus(status);\n                            } \n                        }\n                    });\n            \n                    // Reset word for next guess, if implementing multiple guesses\n                    // setWord([\"\", \"\", \"\", \"\", \"\"]); // Comment out if you're not ready to reset\n                }\n\n                else alert(\"Please write a complete word before checking!\");    // ensure full word is entered before check\n            }\n            \n            \n        };\n\n        window.addEventListener(\"keydown\", letterTyped);\n\n        // Cleanup function to remove the event listener when the component unmounts\n        return () => {\n            window.removeEventListener(\"keydown\", letterTyped);\n        };\n\n    }, [word]);\n\n\n    return (\n        <div className=\"bg-gray-900 h-screen flex flex-col\">\n            {/* Header*/}\n            <div className=\"w-full flex justify-between items-center pt-3 px-4 pb-4\">\n                {/* Return Home button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={goToHome}>\n\n                    Return Home\n                </button>\n\n                {/* Game Name */}\n                <h1 className=\"text-white text-3xl font-sans\">SWEdle</h1>\n\n                {/* How to Play button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={() => setButtonPopup(true)}>\n\n                    How to Play\n                </button>\n            </div>\n\n            {/* White line below header */}\n            <div className=\"w-full border-t-4 border-white pt-4\"></div>\n\n            {/* Game content */}\n\n            {/* Row for Guess 1 */}\n            <div className=\"flex justify-center items-center space-x-4 mt-8 pt-3 pb-4\">\n                {word.map((letter, index) => (\n                    <div key={index} className={` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${wordStatus[index] === 'correct' ? 'bg-green-500' : wordStatus[index] === 'present' ? 'bg-yellow-500' : wordStatus[index] === 'absent' ? 'bg-red-500' : 'bg-transparent'}`}>\n                        {letter}\n                    </div>\n                ))}\n            </div>\n\n\n\n            {/* Additional content */}\n            <div className=\"text-center mt-24 pb-3 w-full\">\n                <p className=\"text-white font-sans\">Created by Jonathan Oh</p>\n            </div>\n\n            {/* Pop-up for How to Play */}\n            <Popup trigger={buttonPopup} setTrigger={setButtonPopup}>\n                <h3 className=\"text-xl text-white\">How to Play</h3>\n                <p className=\"mt-4 text-white\">Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. </p> <br></br> \n                <p className=\"mt-2 text-white\"> A green tile indicates a correct letter and correct position. A yellow tile\n                indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.</p>\n            </Popup>\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEf,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAS;EAChE,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAACa,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC,CAAC;;EAEnE;;EAEA,MAAMC,OAAO,GAAG,CAAC,EAAE,CAAC;EACpB,MAAMC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAErC,IAAIC,KAAK,GAAG,UAAU,CAAC,CAAK;;EAE5B,IAAIC,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAC5B,MAAMkB,QAAQ,GAAGA,CAAA,KAAM;IACnBD,QAAQ,CAAC,OAAO,CAAC;EACrB,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACZ;IACA,MAAMqB,WAAW,GAAIC,KAAK,IAAK;MAC3B,IAAIJ,KAAK,CAACK,IAAI,CAACD,KAAK,CAACE,GAAG,CAAC,EACzB;QACI,IAAIC,KAAK,GAAGf,IAAI,CAACgB,OAAO,CAAC,EAAE,CAAC;QAC5B,IAAID,KAAK,KAAK,CAAC,CAAC,EAChB;UACI,MAAME,OAAO,GAAG,CAAC,GAAGjB,IAAI,CAAC;UACzBiB,OAAO,CAACF,KAAK,CAAC,GAAGH,KAAK,CAACE,GAAG,CAACI,WAAW,CAAC,CAAC;UACxCjB,OAAO,CAACgB,OAAO,CAAC;QACpB;MACJ,CAAC,MACI,IAAIL,KAAK,CAACE,GAAG,KAAK,WAAW,IAAIF,KAAK,CAACE,GAAG,KAAK,QAAQ,EAC5D;QACI,IAAIK,QAAQ,GAAGnB,IAAI,CAACgB,OAAO,CAAC,EAAE,CAAC;;QAE/B;QACA;QACA,IAAIG,QAAQ,KAAK,CAAC,CAAC,IAAIA,QAAQ,KAAK,CAAC,EACrC;UACI,MAAMF,OAAO,GAAG,CAAC,GAAGjB,IAAI,CAAC;UACzBiB,OAAO,CAACE,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE;UAC1BlB,OAAO,CAACgB,OAAO,CAAC;QACpB,CAAC;UACe;UAChB;YACI,MAAMA,OAAO,GAAG,CAAC,GAAGjB,IAAI,CAAC;YACzBiB,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAQ;YACxBhB,OAAO,CAACgB,OAAO,CAAC;UACpB;MACJ,CAAC,MACI,IAAIL,KAAK,CAACE,GAAG,KAAK,OAAO,EAAE;QAC5B,IAAIC,KAAK,GAAGf,IAAI,CAACgB,OAAO,CAAC,EAAE,CAAC;QAC5B,IAAID,KAAK,KAAK,CAAC,CAAC,EAAE;UAAE;;UAGhB;UACA,MAAMK,OAAO,GAAG,CAAC,GAAGb,GAAG,CAAC,CAAC,CAAC;UAC1B,MAAMc,MAAM,GAAG,CAAC,GAAGnB,UAAU,CAAC;UAE9B,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,IAAI,CAACuB,MAAM,EAAED,CAAC,EAAE,EAAE;YAClC,IAAItB,IAAI,CAACsB,CAAC,CAAC,KAAKf,GAAG,CAACe,CAAC,CAAC,EACtB;cACID,MAAM,CAACC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;cACvBnB,aAAa,CAACkB,MAAM,CAAC;cAErBD,OAAO,CAACE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACvB;UACJ;;UAEA;UACAtB,IAAI,CAACwB,OAAO,CAAC,CAACC,MAAM,EAAEH,CAAC,KAAK;YACxB,IAAID,MAAM,CAACC,CAAC,CAAC,KAAK,SAAS,EAAE;cAAE;cAC3B,IAAIF,OAAO,CAACM,QAAQ,CAACD,MAAM,CAAC,EAC5B;gBACI;gBACA;gBACA,MAAME,WAAW,GAAGP,OAAO,CAACJ,OAAO,CAACS,MAAM,CAAC;gBAC3CL,OAAO,CAACO,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC;;gBAE7BN,MAAM,CAACC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;gBACvBnB,aAAa,CAACkB,MAAM,CAAC;cACzB;YACJ;UACJ,CAAC,CAAC;;UAEF;UACA;QACJ,CAAC,MAEIO,KAAK,CAAC,+CAA+C,CAAC,CAAC,CAAI;MACpE;IAGJ,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEnB,WAAW,CAAC;;IAE/C;IACA,OAAO,MAAM;MACTkB,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEpB,WAAW,CAAC;IACtD,CAAC;EAEL,CAAC,EAAE,CAACX,IAAI,CAAC,CAAC;EAGV,oBACIL,OAAA;IAAKqC,SAAS,EAAC,oCAAoC;IAAAC,QAAA,gBAE/CtC,OAAA;MAAKqC,SAAS,EAAC,yDAAyD;MAAAC,QAAA,gBAEpEtC,OAAA;QACIqC,SAAS,EAAC,4JAA4J;QACtKE,OAAO,EAAExB,QAAS;QAAAuB,QAAA,EAAC;MAGvB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAGT3C,OAAA;QAAIqC,SAAS,EAAC,+BAA+B;QAAAC,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAGzD3C,OAAA;QACIqC,SAAS,EAAC,4JAA4J;QACtKE,OAAO,EAAEA,CAAA,KAAMnC,cAAc,CAAC,IAAI,CAAE;QAAAkC,QAAA,EAAC;MAGzC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAGN3C,OAAA;MAAKqC,SAAS,EAAC;IAAqC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAK3D3C,OAAA;MAAKqC,SAAS,EAAC,2DAA2D;MAAAC,QAAA,EACrEjC,IAAI,CAACuC,GAAG,CAAC,CAACd,MAAM,EAAEV,KAAK,kBACpBpB,OAAA;QAAiBqC,SAAS,EAAG,4EAA2E9B,UAAU,CAACa,KAAK,CAAC,KAAK,SAAS,GAAG,cAAc,GAAGb,UAAU,CAACa,KAAK,CAAC,KAAK,SAAS,GAAG,eAAe,GAAGb,UAAU,CAACa,KAAK,CAAC,KAAK,QAAQ,GAAG,YAAY,GAAG,gBAAiB,EAAE;QAAAkB,QAAA,EAC7QR;MAAM,GADDV,KAAK;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAKN3C,OAAA;MAAKqC,SAAS,EAAC,+BAA+B;MAAAC,QAAA,eAC1CtC,OAAA;QAAGqC,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAAsB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CAAC,eAGN3C,OAAA,CAACF,KAAK;MAAC+C,OAAO,EAAE1C,WAAY;MAAC2C,UAAU,EAAE1C,cAAe;MAAAkC,QAAA,gBACpDtC,OAAA;QAAIqC,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnD3C,OAAA;QAAGqC,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAkI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,KAAC,eAAA3C,OAAA;QAAAwC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/K3C,OAAA;QAAGqC,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAC4F;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5H,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd,CAAC;AAACzC,EAAA,CA/JID,IAAI;EAAA,QAaSJ,WAAW;AAAA;AAAAkD,EAAA,GAbxB9C,IAAI;AAiKV,eAAeA,IAAI;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}