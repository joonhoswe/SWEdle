{"ast":null,"code":"var _jsxFileName = \"/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [buttonPopup, setButtonPopup] = useState(false);\n  const [guesses, setGuesses] = useState(Array(6).fill(Array(5).fill(\"\"))); // 6 guesses\n  const [guessStatus, setGuessStatus] = useState(Array(6).fill(Array(5).fill(\"null\"))); // status for each guess\n\n  const ans = [\"A\", \"N\", \"G\", \"I\", \"E\"];\n  let regex = /^[a-z]$/i; // used to test if keyboard input is a letter\n\n  let navigate = useNavigate();\n  const goToHome = () => {\n    navigate('/Home');\n  };\n  useEffect(() => {\n    const letterTyped = event => {\n      // Prevent any action if all guesses are used\n      if (guesses[5].every(letter => letter !== \"\")) {\n        alert(\"All guesses used. Restart the game to play again.\");\n        return;\n      }\n      const currentGuessIndex = guesses.findIndex(guess => guess.includes(\"\"));\n      if (currentGuessIndex === -1) {\n        // This should not happen as we check all guesses are used at the start\n        return;\n      }\n      const newGuesses = guesses.map((guess, index) => [...guess]); // Deep copy to avoid direct state mutation\n      let newGuess = newGuesses[currentGuessIndex];\n      if (regex.test(event.key) && event.key.length === 1) {\n        const letterIndex = newGuess.indexOf(\"\");\n        if (letterIndex !== -1) {\n          newGuess[letterIndex] = event.key.toUpperCase();\n          setGuesses(newGuesses);\n        }\n      } else if (event.key === \"Backspace\" || event.key === \"Delete\") {\n        const letterIndex = newGuess.lastIndexOf(\"\") - 1;\n        if (letterIndex >= 0) {\n          newGuess[letterIndex] = \"\";\n          setGuesses(newGuesses);\n        }\n      } else if (event.key === \"Enter\") {\n        if (newGuess.includes(\"\")) {\n          alert(\"Please complete the word before checking!\");\n        } else {\n          // First pass: Mark correct positions as \"correct\"\n          const ansCopy = [...ans]; // Copy of answer for mutable operations\n          const status = [...guessStatus[currentGuessIndex]];\n          for (let i = 0; i < newGuess.length; i++) {\n            if (newGuess[i] === ans[i]) {\n              status[i] = \"correct\"; // Mark as correct\n              setGuessStatus(status);\n              ansCopy[i] = null; // Remove the matched letter from consideration\n            }\n          }\n\n          // Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\n          newGuess.forEach((letter, i) => {\n            if (status[i] !== \"correct\") {\n              // Skip already correctly matched letters\n              if (ansCopy.includes(letter)) {\n                // If letter is present in the answer but not yet matched, it's potentially yellow\n                // Remove this letter from ansCopy to acknowledge its accounted occurrence\n                const removeIndex = ansCopy.indexOf(letter);\n                ansCopy[removeIndex] = null; // Remove from consideration\n\n                status[i] = \"present\";\n                setGuessStatus(status);\n              } else {\n                status[i] = \"wrong\";\n                setGuessStatus(status);\n              }\n            }\n          });\n        }\n      }\n    };\n    window.addEventListener(\"keydown\", letterTyped);\n    return () => {\n      window.removeEventListener(\"keydown\", letterTyped);\n    };\n  }, [guesses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 h-screen flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full flex justify-between items-center pt-3 px-4 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: goToHome,\n        children: \"Return Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white text-4xl font-sans\",\n        children: \"SWEdle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: () => setButtonPopup(true),\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full border-t-4 border-white pt-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center\",\n      children: guesses.map((guess, guessIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center space-x-4 my-2\",\n        children: guess.map((letter, letterIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: ` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${guessStatus[letterIndex] === 'correct' ? 'bg-green-500 scale-110 transition duration-600 ease-in-out' : guessStatus[letterIndex] === 'present' ? 'bg-yellow-500 scale-110 transition duration-600 ease-in-out' : guessStatus[letterIndex] === 'wrong' ? 'bg-red-500 scale-110 transition duration-600 ease-in-out' : 'bg-transparent'}`,\n          children: letter\n        }, letterIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }, this))\n      }, guessIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-24 pb-3 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white font-sans\",\n        children: \"Created by Jonathan Oh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: buttonPopup,\n      setTrigger: setButtonPopup,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl text-white\",\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-white\",\n        children: \"Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 183\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \" A green tile indicates a correct letter and correct position. A yellow tile indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"HSKKDUahJx3ELcJ8umQrTGFJo6g=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Popup","jsxDEV","_jsxDEV","Game","_s","buttonPopup","setButtonPopup","guesses","setGuesses","Array","fill","guessStatus","setGuessStatus","ans","regex","navigate","goToHome","letterTyped","event","every","letter","alert","currentGuessIndex","findIndex","guess","includes","newGuesses","map","index","newGuess","test","key","length","letterIndex","indexOf","toUpperCase","lastIndexOf","ansCopy","status","i","forEach","removeIndex","window","addEventListener","removeEventListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","guessIndex","trigger","setTrigger","_c","$RefreshReg$"],"sources":["/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\"; \n\nconst Game = () => {\n\n    const [buttonPopup, setButtonPopup] = useState(false);\n\n    const [guesses, setGuesses] = useState(Array(6).fill(Array(5).fill(\"\")));      // 6 guesses\n    const [guessStatus, setGuessStatus] = useState(Array(6).fill(Array(5).fill(\"null\")));   // status for each guess\n\n    const ans = [\"A\", \"N\", \"G\", \"I\", \"E\"];\n\n    let regex = /^[a-z]$/i;     // used to test if keyboard input is a letter\n\n    let navigate = useNavigate();\n    const goToHome = () => {\n        navigate('/Home');\n    };\n\n\n    \n    useEffect(() => {\n        const letterTyped = (event) => {\n            // Prevent any action if all guesses are used\n            if (guesses[5].every(letter => letter !== \"\")) {\n                alert(\"All guesses used. Restart the game to play again.\");\n                return;\n            }\n    \n            const currentGuessIndex = guesses.findIndex(guess => guess.includes(\"\"));\n            if (currentGuessIndex === -1) {\n                // This should not happen as we check all guesses are used at the start\n                return;\n            }\n    \n            const newGuesses = guesses.map((guess, index) => [...guess]); // Deep copy to avoid direct state mutation\n            let newGuess = newGuesses[currentGuessIndex];\n    \n            if (regex.test(event.key) && event.key.length === 1) {\n                const letterIndex = newGuess.indexOf(\"\");\n                if (letterIndex !== -1) {\n                    newGuess[letterIndex] = event.key.toUpperCase();\n                    setGuesses(newGuesses);\n                }\n            } else if (event.key === \"Backspace\" || event.key === \"Delete\") {\n                const letterIndex = newGuess.lastIndexOf(\"\") - 1;\n                if (letterIndex >= 0) {\n                    newGuess[letterIndex] = \"\";\n                    setGuesses(newGuesses);\n                }\n            } else if (event.key === \"Enter\") {\n                if (newGuess.includes(\"\")) {\n                    alert(\"Please complete the word before checking!\");\n                } else {\n                    // First pass: Mark correct positions as \"correct\"\n                            const ansCopy = [...ans]; // Copy of answer for mutable operations\n                            const status = [...guessStatus[currentGuessIndex]];\n    \n                            for (let i = 0; i < newGuess.length; i++) {\n                                if (newGuess[i] === ans[i]) \n                                {\n                                    status[i] = \"correct\"; // Mark as correct\n                                    setGuessStatus(status);\n    \n                                    ansCopy[i] = null; // Remove the matched letter from consideration\n                                }\n                            }\n                    \n                            // Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\n                            newGuess.forEach((letter, i) => {\n                                if (status[i] !== \"correct\") { // Skip already correctly matched letters\n                                    if (ansCopy.includes(letter)) \n                                    {\n                                        // If letter is present in the answer but not yet matched, it's potentially yellow\n                                        // Remove this letter from ansCopy to acknowledge its accounted occurrence\n                                        const removeIndex = ansCopy.indexOf(letter);\n                                        ansCopy[removeIndex] = null; // Remove from consideration\n    \n                                        status[i] = \"present\"; \n                                        setGuessStatus(status);\n                                    } \n                                    else\n                                    {\n                                        status[i] = \"wrong\";\n                                        setGuessStatus(status);\n                                    }\n                                }\n                            });\n                }\n            }\n        };\n    \n        window.addEventListener(\"keydown\", letterTyped);\n    \n        return () => {\n            window.removeEventListener(\"keydown\", letterTyped);\n        };\n    }, [guesses]);\n\n    return (\n        <div className=\"bg-gray-900 h-screen flex flex-col\">\n            {/* Header*/}\n            <div className=\"w-full flex justify-between items-center pt-3 px-4 pb-4\">\n                {/* Return Home button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={goToHome}>\n\n                    Return Home\n                </button>\n\n                {/* Game Name */}\n                <h1 className=\"text-white text-4xl font-sans\">SWEdle</h1>\n\n                {/* How to Play button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={() => setButtonPopup(true)}>\n\n                    How to Play\n                </button>\n            </div>\n\n            {/* White line below header */}\n            <div className=\"w-full border-t-4 border-white pt-4\"></div>\n\n            {/* Game content */}\n\n             {/* Game Board for Guesses */}\n            <div className=\"flex flex-col items-center justify-center\">\n                {guesses.map((guess, guessIndex) => (\n                    <div key={guessIndex} className=\"flex justify-center items-center space-x-4 my-2\">\n                        {guess.map((letter, letterIndex) => (\n                            <div key={letterIndex} className={` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${guessStatus[letterIndex] === 'correct' ? 'bg-green-500 scale-110 transition duration-600 ease-in-out' : guessStatus[letterIndex] === 'present' ? 'bg-yellow-500 scale-110 transition duration-600 ease-in-out' :  guessStatus[letterIndex] === 'wrong' ? 'bg-red-500 scale-110 transition duration-600 ease-in-out' : 'bg-transparent'}`}>\n                            {letter}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n\n\n            {/* Additional content */}\n            <div className=\"text-center mt-24 pb-3 w-full\">\n                <p className=\"text-white font-sans\">Created by Jonathan Oh</p>\n            </div>\n\n            {/* Pop-up for How to Play */}\n            <Popup trigger={buttonPopup} setTrigger={setButtonPopup}>\n                <h3 className=\"text-xl text-white\">How to Play</h3>\n                <p className=\"mt-4 text-white\">Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. </p> <br></br> \n                <p className=\"mt-2 text-white\"> A green tile indicates a correct letter and correct position. A yellow tile\n                indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.</p>\n            </Popup>\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}