{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useNavigate}from\"react-router-dom\";import Popup from\"../components/Popup\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Game=()=>{const[buttonPopup,setButtonPopup]=useState(false);const[guesses,setGuesses]=useState(Array(6).fill(Array(5).fill(\"\")));// 6 guesses\nconst[guessStatus,setGuessStatus]=useState(Array(6).fill(Array(5).fill(\"null\")));// status for each guess\nconst[currentGuessIndex,setCurrentGuessIndex]=useState(0);const[gameWon,setGameWon]=useState(false);const[gameLost,setGameLost]=useState(false);let navigate=useNavigate();const goToHome=()=>{navigate('/Home');};useEffect(()=>{// Adding the keydown event listener when the component mounts\nconst letterTyped=event=>{const ans=[\"R\",\"E\",\"A\",\"C\",\"T\"];const regex=/^[a-z]$/i;// used to test if keyboard input is a letter\nif(currentGuessIndex<6)// while guesses are left\n{const newGuesses=[...guesses];const newGuess=[...newGuesses[currentGuessIndex]];const letterIndex=newGuess.indexOf(\"\");if(regex.test(event.key)&&letterIndex!==-1){newGuess[letterIndex]=event.key.toUpperCase();newGuesses[currentGuessIndex]=newGuess;setGuesses(newGuesses);}else{if(event.key===\"Backspace\"||event.key===\"Delete\"){let delIndex=newGuess.indexOf(\"\");// found an empty space, meaning previous index is a letter\n// don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\nif(delIndex!==-1&&delIndex!==0){newGuess[delIndex-1]=\"\";newGuesses[currentGuessIndex]=newGuess;setGuesses(newGuesses);}else// no empty space, meaning array is full\n{newGuess[4]=\"\";// delete by replacing last index's letter with a empty string\nnewGuesses[currentGuessIndex]=newGuess;setGuesses(newGuesses);}}else if(event.key===\"Enter\"){let index=newGuess.indexOf(\"\");if(index!==-1)// ensure full word is entered before check\n{alert(\"Please write a complete word before checking!\");}else if(index===-1){// Ensure the guess is complet\n// First pass: Mark correct positions as \"correct\"\nconst ansCopy=[...ans];// Copy of answer for mutable operations\nconst newGuessStatus=[...guessStatus];const status=new Array(5).fill(\"wrong\");for(let i=0;i<newGuess.length;i++){if(newGuess[i]===ans[i]){status[i]=\"correct\";// Mark as correct\nansCopy[i]=null;// Remove the matched letter from consideration\n}}// Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\nnewGuess.forEach((letter,i)=>{if(status[i]!==\"correct\"){// Skip already correctly matched letters\nif(ansCopy.includes(letter)){// If letter is present in the answer but not yet matched, it's potentially yellow\n// Remove this letter from ansCopy to acknowledge its accounted occurrence\nconst removeIndex=ansCopy.indexOf(letter);ansCopy[removeIndex]=null;// Remove from consideration\nstatus[i]=\"present\";}else{status[i]=\"wrong\";}}});newGuessStatus[currentGuessIndex]=status;setGuessStatus(newGuessStatus);let correct=true;newGuess.forEach((letter,i)=>{if(status[i]!==\"correct\")correct=false;});if(correct)setGameWon(true);setCurrentGuessIndex(currentGuessIndex+1);}}}}};if(currentGuessIndex===6)setGameLost(true);window.addEventListener(\"keydown\",letterTyped);// Cleanup function to remove the event listener when the component unmounts\nreturn()=>{window.removeEventListener(\"keydown\",letterTyped);};},[guesses,currentGuessIndex,guessStatus,regex,ans]);return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-900 h-screen flex flex-col\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"w-full flex justify-between items-center pt-3 px-4 pb-4\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",onClick:goToHome,children:\"Return Home\"}),/*#__PURE__*/_jsx(\"h1\",{className:\"text-white text-4xl font-sans\",children:\"SWEdle\"}),/*#__PURE__*/_jsx(\"button\",{className:\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",onClick:()=>setButtonPopup(true),children:\"How to Play\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full border-t-4 border-white pt-4\"}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-col items-center justify-center\",children:guesses.map((guess,guessIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center items-center space-x-4 my-2\",children:guess.map((letter,letterIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\" text-white border-2 h-16 w-16 flex justify-center items-center text-4xl \".concat(guessStatus[guessIndex][letterIndex]==='correct'?'bg-green-500 scale-110 transition duration-600 ease-in-out':guessStatus[guessIndex][letterIndex]==='present'?'bg-yellow-500 scale-110 transition duration-600 ease-in-out':guessStatus[guessIndex][letterIndex]==='wrong'?'bg-red-500 scale-110 transition duration-600 ease-in-out':'bg-transparent'),children:letter},letterIndex))},guessIndex))}),/*#__PURE__*/_jsx(\"div\",{className:\"text-center mt-24 pb-3 w-full\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-white font-sans\",children:\"Created by Jonathan Oh\"})}),/*#__PURE__*/_jsxs(Popup,{trigger:buttonPopup,setTrigger:setButtonPopup,children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl text-white\",children:\"How to Play\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-4 text-white\",children:\"Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. \"}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-2 text-white\",children:\" A green tile indicates a correct letter and correct position. A yellow tile indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.\"})]}),/*#__PURE__*/_jsxs(Popup,{trigger:gameWon,setTrigger:setGameWon,children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-2xl text-green-500\",children:\"Congratulations!\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-4 text-white\",children:\"You have correctly guessed the correct word! \"}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-2 text-white\",children:\"Refresh the website to try again with a different word!\"})]}),/*#__PURE__*/_jsxs(Popup,{trigger:gameLost,setTrigger:setGameLost,children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-2xl text-red-500\",children:\"Game Over!\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-4 text-white\",children:\"You have used all 6 guesses and were unable to guess the correct word. \"}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-2 text-white\",children:\"Refresh the website to try again with a different word!\"})]})]});};export default Game;","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Popup","jsx","_jsx","jsxs","_jsxs","Game","buttonPopup","setButtonPopup","guesses","setGuesses","Array","fill","guessStatus","setGuessStatus","currentGuessIndex","setCurrentGuessIndex","gameWon","setGameWon","gameLost","setGameLost","navigate","goToHome","letterTyped","event","ans","regex","newGuesses","newGuess","letterIndex","indexOf","test","key","toUpperCase","delIndex","index","alert","ansCopy","newGuessStatus","status","i","length","forEach","letter","includes","removeIndex","correct","window","addEventListener","removeEventListener","className","children","onClick","map","guess","guessIndex","concat","trigger","setTrigger"],"sources":["/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\"; \n\nconst Game = () => {\n\n    const [buttonPopup, setButtonPopup] = useState(false);\n\n    const [guesses, setGuesses] = useState(Array(6).fill(Array(5).fill(\"\")));      // 6 guesses\n    const [guessStatus, setGuessStatus] = useState(Array(6).fill(Array(5).fill(\"null\")));   // status for each guess\n\n    const [currentGuessIndex, setCurrentGuessIndex] = useState(0);\n\n    const [gameWon, setGameWon] = useState(false);\n    const [gameLost, setGameLost] = useState(false);\n\n\n    \n\n    let navigate = useNavigate();\n    const goToHome = () => {\n        navigate('/Home');\n    };\n\n    useEffect(() => {\n        // Adding the keydown event listener when the component mounts\n        const letterTyped = (event) => {\n            \n            const ans = [\"R\", \"E\", \"A\", \"C\", \"T\"];\n            const regex = /^[a-z]$/i;     // used to test if keyboard input is a letter\n\n            if (currentGuessIndex < 6)  // while guesses are left\n            {\n                const newGuesses = [...guesses];\n                const newGuess = [...newGuesses[currentGuessIndex]];\n                const letterIndex = newGuess.indexOf(\"\");\n\n                if (regex.test(event.key) && letterIndex !== -1) \n                {\n                    newGuess[letterIndex] = event.key.toUpperCase();\n                    newGuesses[currentGuessIndex] = newGuess;\n                    setGuesses(newGuesses);\n                }\n                else\n                {\n                    if (event.key === \"Backspace\" || event.key === \"Delete\") \n                    {\n                        let delIndex = newGuess.indexOf(\"\");\n    \n                        // found an empty space, meaning previous index is a letter\n                        // don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\n                        if (delIndex !== -1 && delIndex !== 0)        \n                        {\n                            newGuess[delIndex - 1] = \"\";\n                            newGuesses[currentGuessIndex] = newGuess;\n                            setGuesses(newGuesses);\n                        }\n                        else            // no empty space, meaning array is full\n                        {\n                            newGuess[4] = \"\";        // delete by replacing last index's letter with a empty string\n                            newGuesses[currentGuessIndex] = newGuess;\n                            setGuesses(newGuesses);\n                        }\n                    }\n                    else if (event.key === \"Enter\") \n                    {\n                        let index = newGuess.indexOf(\"\");\n    \n                        if (index !== -1) // ensure full word is entered before check\n                        {\n                            alert(\"Please write a complete word before checking!\"); \n                        }   \n                        else if (index === -1) { // Ensure the guess is complet\n    \n                            // First pass: Mark correct positions as \"correct\"\n                            const ansCopy = [...ans]; // Copy of answer for mutable operations\n                            const newGuessStatus = [...guessStatus];\n                            const status =  new Array(5).fill(\"wrong\");\n    \n                            for (let i = 0; i < newGuess.length; i++) {\n                                if (newGuess[i] === ans[i]) \n                                {\n                                    status[i] = \"correct\"; // Mark as correct\n    \n                                    ansCopy[i] = null; // Remove the matched letter from consideration\n                                }\n                            }\n                    \n                            // Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\n                            newGuess.forEach((letter, i) => {\n                                if (status[i] !== \"correct\") { // Skip already correctly matched letters\n                                    if (ansCopy.includes(letter)) \n                                    {\n                                        // If letter is present in the answer but not yet matched, it's potentially yellow\n                                        // Remove this letter from ansCopy to acknowledge its accounted occurrence\n                                        const removeIndex = ansCopy.indexOf(letter);\n                                        ansCopy[removeIndex] = null; // Remove from consideration\n    \n                                        status[i] = \"present\"; \n                                    } \n                                    else\n                                    {\n                                        status[i] = \"wrong\";\n                                    }\n                                }\n                            });\n                            \n                            newGuessStatus[currentGuessIndex] = status;\n                            setGuessStatus(newGuessStatus);\n\n                            let correct = true;\n                            newGuess.forEach((letter, i) => {\n                                if (status[i] !== \"correct\") correct = false;\n                            });\n\n                            if (correct) setGameWon(true);\n\n                            setCurrentGuessIndex(currentGuessIndex + 1);\n                        } \n                    }\n                } \n            }\n        };\n\n        if (currentGuessIndex === 6) setGameLost(true);\n\n        window.addEventListener(\"keydown\", letterTyped);\n\n        // Cleanup function to remove the event listener when the component unmounts\n        return () => {\n            window.removeEventListener(\"keydown\", letterTyped);\n        };\n\n    }, [guesses, currentGuessIndex, guessStatus, regex, ans]);\n\n    \n    return (\n        <div className=\"bg-gray-900 h-screen flex flex-col\">\n            {/* Header*/}\n            <div className=\"w-full flex justify-between items-center pt-3 px-4 pb-4\">\n                {/* Return Home button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={goToHome}>\n\n                    Return Home\n                </button>\n\n                {/* Game Name */}\n                <h1 className=\"text-white text-4xl font-sans\">SWEdle</h1>\n\n                {/* How to Play button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={() => setButtonPopup(true)}>\n\n                    How to Play\n                </button>\n            </div>\n\n            {/* White line below header */}\n            <div className=\"w-full border-t-4 border-white pt-4\"></div>\n\n            {/* Game content */}\n\n             {/* Game Board for Guesses */}\n            <div className=\"flex flex-col items-center justify-center\">\n                {guesses.map((guess, guessIndex) => (\n                    <div key={guessIndex} className=\"flex justify-center items-center space-x-4 my-2\">\n                        {guess.map((letter, letterIndex) => (\n                            <div key={letterIndex} className={` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${guessStatus[guessIndex][letterIndex] === 'correct' ? 'bg-green-500 scale-110 transition duration-600 ease-in-out' : guessStatus[guessIndex][letterIndex] === 'present' ? 'bg-yellow-500 scale-110 transition duration-600 ease-in-out' :  guessStatus[guessIndex][letterIndex] === 'wrong' ? 'bg-red-500 scale-110 transition duration-600 ease-in-out' : 'bg-transparent'}`}>\n                            {letter}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n\n\n            {/* Additional content */}\n            <div className=\"text-center mt-24 pb-3 w-full\">\n                <p className=\"text-white font-sans\">Created by Jonathan Oh</p>\n            </div>\n\n            {/* Pop-up for How to Play */}\n            <Popup trigger={buttonPopup} setTrigger={setButtonPopup}>\n                <h3 className=\"text-xl text-white\">How to Play</h3>\n                <p className=\"mt-4 text-white\">Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. </p> <br></br> \n                <p className=\"mt-2 text-white\"> A green tile indicates a correct letter and correct position. A yellow tile\n                indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.</p>\n            </Popup>\n            \n            {/* Pop-up for Game Won */}\n            <Popup trigger={gameWon} setTrigger={setGameWon}>\n                <h3 className=\"text-2xl text-green-500\">Congratulations!</h3>\n                <p className=\"mt-4 text-white\">You have correctly guessed the correct word! </p> <br></br> \n                <p className=\"mt-2 text-white\">Refresh the website to try again with a different word!</p>\n            </Popup>\n\n            {/* Pop-up for Game Lost */}\n            <Popup trigger={gameLost} setTrigger={setGameLost}>\n                <h3 className=\"text-2xl text-red-500\">Game Over!</h3>\n                <p className=\"mt-4 text-white\">You have used all 6 guesses and were unable to guess the correct word. </p> <br></br> \n                <p className=\"mt-2 text-white\">Refresh the website to try again with a different word!</p>\n            </Popup>\n        </div>\n\n    );\n};\n\nexport default Game;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,KAAK,KAAM,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAExC,KAAM,CAAAC,IAAI,CAAGA,CAAA,GAAM,CAEf,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAErD,KAAM,CAACU,OAAO,CAAEC,UAAU,CAAC,CAAGX,QAAQ,CAACY,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAO;AAC/E,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGf,QAAQ,CAACY,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAI;AAExF,KAAM,CAACG,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGjB,QAAQ,CAAC,CAAC,CAAC,CAE7D,KAAM,CAACkB,OAAO,CAAEC,UAAU,CAAC,CAAGnB,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACoB,QAAQ,CAAEC,WAAW,CAAC,CAAGrB,QAAQ,CAAC,KAAK,CAAC,CAK/C,GAAI,CAAAsB,QAAQ,CAAGrB,WAAW,CAAC,CAAC,CAC5B,KAAM,CAAAsB,QAAQ,CAAGA,CAAA,GAAM,CACnBD,QAAQ,CAAC,OAAO,CAAC,CACrB,CAAC,CAEDvB,SAAS,CAAC,IAAM,CACZ;AACA,KAAM,CAAAyB,WAAW,CAAIC,KAAK,EAAK,CAE3B,KAAM,CAAAC,GAAG,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAC,CACrC,KAAM,CAAAC,KAAK,CAAG,UAAU,CAAM;AAE9B,GAAIX,iBAAiB,CAAG,CAAC,CAAG;AAC5B,CACI,KAAM,CAAAY,UAAU,CAAG,CAAC,GAAGlB,OAAO,CAAC,CAC/B,KAAM,CAAAmB,QAAQ,CAAG,CAAC,GAAGD,UAAU,CAACZ,iBAAiB,CAAC,CAAC,CACnD,KAAM,CAAAc,WAAW,CAAGD,QAAQ,CAACE,OAAO,CAAC,EAAE,CAAC,CAExC,GAAIJ,KAAK,CAACK,IAAI,CAACP,KAAK,CAACQ,GAAG,CAAC,EAAIH,WAAW,GAAK,CAAC,CAAC,CAC/C,CACID,QAAQ,CAACC,WAAW,CAAC,CAAGL,KAAK,CAACQ,GAAG,CAACC,WAAW,CAAC,CAAC,CAC/CN,UAAU,CAACZ,iBAAiB,CAAC,CAAGa,QAAQ,CACxClB,UAAU,CAACiB,UAAU,CAAC,CAC1B,CAAC,IAED,CACI,GAAIH,KAAK,CAACQ,GAAG,GAAK,WAAW,EAAIR,KAAK,CAACQ,GAAG,GAAK,QAAQ,CACvD,CACI,GAAI,CAAAE,QAAQ,CAAGN,QAAQ,CAACE,OAAO,CAAC,EAAE,CAAC,CAEnC;AACA;AACA,GAAII,QAAQ,GAAK,CAAC,CAAC,EAAIA,QAAQ,GAAK,CAAC,CACrC,CACIN,QAAQ,CAACM,QAAQ,CAAG,CAAC,CAAC,CAAG,EAAE,CAC3BP,UAAU,CAACZ,iBAAiB,CAAC,CAAGa,QAAQ,CACxClB,UAAU,CAACiB,UAAU,CAAC,CAC1B,CAAC,IACe;AAChB,CACIC,QAAQ,CAAC,CAAC,CAAC,CAAG,EAAE,CAAS;AACzBD,UAAU,CAACZ,iBAAiB,CAAC,CAAGa,QAAQ,CACxClB,UAAU,CAACiB,UAAU,CAAC,CAC1B,CACJ,CAAC,IACI,IAAIH,KAAK,CAACQ,GAAG,GAAK,OAAO,CAC9B,CACI,GAAI,CAAAG,KAAK,CAAGP,QAAQ,CAACE,OAAO,CAAC,EAAE,CAAC,CAEhC,GAAIK,KAAK,GAAK,CAAC,CAAC,CAAE;AAClB,CACIC,KAAK,CAAC,+CAA+C,CAAC,CAC1D,CAAC,IACI,IAAID,KAAK,GAAK,CAAC,CAAC,CAAE,CAAE;AAErB;AACA,KAAM,CAAAE,OAAO,CAAG,CAAC,GAAGZ,GAAG,CAAC,CAAE;AAC1B,KAAM,CAAAa,cAAc,CAAG,CAAC,GAAGzB,WAAW,CAAC,CACvC,KAAM,CAAA0B,MAAM,CAAI,GAAI,CAAA5B,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC,CAE1C,IAAK,GAAI,CAAA4B,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGZ,QAAQ,CAACa,MAAM,CAAED,CAAC,EAAE,CAAE,CACtC,GAAIZ,QAAQ,CAACY,CAAC,CAAC,GAAKf,GAAG,CAACe,CAAC,CAAC,CAC1B,CACID,MAAM,CAACC,CAAC,CAAC,CAAG,SAAS,CAAE;AAEvBH,OAAO,CAACG,CAAC,CAAC,CAAG,IAAI,CAAE;AACvB,CACJ,CAEA;AACAZ,QAAQ,CAACc,OAAO,CAAC,CAACC,MAAM,CAAEH,CAAC,GAAK,CAC5B,GAAID,MAAM,CAACC,CAAC,CAAC,GAAK,SAAS,CAAE,CAAE;AAC3B,GAAIH,OAAO,CAACO,QAAQ,CAACD,MAAM,CAAC,CAC5B,CACI;AACA;AACA,KAAM,CAAAE,WAAW,CAAGR,OAAO,CAACP,OAAO,CAACa,MAAM,CAAC,CAC3CN,OAAO,CAACQ,WAAW,CAAC,CAAG,IAAI,CAAE;AAE7BN,MAAM,CAACC,CAAC,CAAC,CAAG,SAAS,CACzB,CAAC,IAED,CACID,MAAM,CAACC,CAAC,CAAC,CAAG,OAAO,CACvB,CACJ,CACJ,CAAC,CAAC,CAEFF,cAAc,CAACvB,iBAAiB,CAAC,CAAGwB,MAAM,CAC1CzB,cAAc,CAACwB,cAAc,CAAC,CAE9B,GAAI,CAAAQ,OAAO,CAAG,IAAI,CAClBlB,QAAQ,CAACc,OAAO,CAAC,CAACC,MAAM,CAAEH,CAAC,GAAK,CAC5B,GAAID,MAAM,CAACC,CAAC,CAAC,GAAK,SAAS,CAAEM,OAAO,CAAG,KAAK,CAChD,CAAC,CAAC,CAEF,GAAIA,OAAO,CAAE5B,UAAU,CAAC,IAAI,CAAC,CAE7BF,oBAAoB,CAACD,iBAAiB,CAAG,CAAC,CAAC,CAC/C,CACJ,CACJ,CACJ,CACJ,CAAC,CAED,GAAIA,iBAAiB,GAAK,CAAC,CAAEK,WAAW,CAAC,IAAI,CAAC,CAE9C2B,MAAM,CAACC,gBAAgB,CAAC,SAAS,CAAEzB,WAAW,CAAC,CAE/C;AACA,MAAO,IAAM,CACTwB,MAAM,CAACE,mBAAmB,CAAC,SAAS,CAAE1B,WAAW,CAAC,CACtD,CAAC,CAEL,CAAC,CAAE,CAACd,OAAO,CAAEM,iBAAiB,CAAEF,WAAW,CAAEa,KAAK,CAAED,GAAG,CAAC,CAAC,CAGzD,mBACIpB,KAAA,QAAK6C,SAAS,CAAC,oCAAoC,CAAAC,QAAA,eAE/C9C,KAAA,QAAK6C,SAAS,CAAC,yDAAyD,CAAAC,QAAA,eAEpEhD,IAAA,WACI+C,SAAS,CAAC,4JAA4J,CACtKE,OAAO,CAAE9B,QAAS,CAAA6B,QAAA,CAAC,aAGvB,CAAQ,CAAC,cAGThD,IAAA,OAAI+C,SAAS,CAAC,+BAA+B,CAAAC,QAAA,CAAC,QAAM,CAAI,CAAC,cAGzDhD,IAAA,WACI+C,SAAS,CAAC,4JAA4J,CACtKE,OAAO,CAAEA,CAAA,GAAM5C,cAAc,CAAC,IAAI,CAAE,CAAA2C,QAAA,CAAC,aAGzC,CAAQ,CAAC,EACR,CAAC,cAGNhD,IAAA,QAAK+C,SAAS,CAAC,qCAAqC,CAAM,CAAC,cAK3D/C,IAAA,QAAK+C,SAAS,CAAC,2CAA2C,CAAAC,QAAA,CACrD1C,OAAO,CAAC4C,GAAG,CAAC,CAACC,KAAK,CAAEC,UAAU,gBAC3BpD,IAAA,QAAsB+C,SAAS,CAAC,iDAAiD,CAAAC,QAAA,CAC5EG,KAAK,CAACD,GAAG,CAAC,CAACV,MAAM,CAAEd,WAAW,gBAC3B1B,IAAA,QAAuB+C,SAAS,6EAAAM,MAAA,CAA8E3C,WAAW,CAAC0C,UAAU,CAAC,CAAC1B,WAAW,CAAC,GAAK,SAAS,CAAG,4DAA4D,CAAGhB,WAAW,CAAC0C,UAAU,CAAC,CAAC1B,WAAW,CAAC,GAAK,SAAS,CAAG,6DAA6D,CAAIhB,WAAW,CAAC0C,UAAU,CAAC,CAAC1B,WAAW,CAAC,GAAK,OAAO,CAAG,0DAA0D,CAAG,gBAAgB,CAAG,CAAAsB,QAAA,CAC1dR,MAAM,EADGd,WAEL,CACR,CAAC,EALI0B,UAML,CACR,CAAC,CACD,CAAC,cAKNpD,IAAA,QAAK+C,SAAS,CAAC,+BAA+B,CAAAC,QAAA,cAC1ChD,IAAA,MAAG+C,SAAS,CAAC,sBAAsB,CAAAC,QAAA,CAAC,wBAAsB,CAAG,CAAC,CAC7D,CAAC,cAGN9C,KAAA,CAACJ,KAAK,EAACwD,OAAO,CAAElD,WAAY,CAACmD,UAAU,CAAElD,cAAe,CAAA2C,QAAA,eACpDhD,IAAA,OAAI+C,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAC,aAAW,CAAI,CAAC,cACnDhD,IAAA,MAAG+C,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,oIAAkI,CAAG,CAAC,IAAC,cAAAhD,IAAA,QAAQ,CAAC,cAC/KA,IAAA,MAAG+C,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,0MAC4F,CAAG,CAAC,EAC5H,CAAC,cAGR9C,KAAA,CAACJ,KAAK,EAACwD,OAAO,CAAExC,OAAQ,CAACyC,UAAU,CAAExC,UAAW,CAAAiC,QAAA,eAC5ChD,IAAA,OAAI+C,SAAS,CAAC,yBAAyB,CAAAC,QAAA,CAAC,kBAAgB,CAAI,CAAC,cAC7DhD,IAAA,MAAG+C,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,+CAA6C,CAAG,CAAC,IAAC,cAAAhD,IAAA,QAAQ,CAAC,cAC1FA,IAAA,MAAG+C,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,yDAAuD,CAAG,CAAC,EACvF,CAAC,cAGR9C,KAAA,CAACJ,KAAK,EAACwD,OAAO,CAAEtC,QAAS,CAACuC,UAAU,CAAEtC,WAAY,CAAA+B,QAAA,eAC9ChD,IAAA,OAAI+C,SAAS,CAAC,uBAAuB,CAAAC,QAAA,CAAC,YAAU,CAAI,CAAC,cACrDhD,IAAA,MAAG+C,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,yEAAuE,CAAG,CAAC,IAAC,cAAAhD,IAAA,QAAQ,CAAC,cACpHA,IAAA,MAAG+C,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,yDAAuD,CAAG,CAAC,EACvF,CAAC,EACP,CAAC,CAGd,CAAC,CAED,cAAe,CAAA7C,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}