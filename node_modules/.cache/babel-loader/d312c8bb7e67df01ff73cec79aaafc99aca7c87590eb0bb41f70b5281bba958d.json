{"ast":null,"code":"var _jsxFileName = \"/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\";\nimport correctImage from '../images/correct.png';\nimport presentImage from '../images/present.png';\nimport wrongImage from '../images/wrong.png';\nimport { use } from '../../backend/app';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [buttonPopup, setButtonPopup] = useState(false);\n  const [guesses, setGuesses] = useState(Array(6).fill(Array(5).fill(\"\"))); // 6 guesses\n  const [guessStatus, setGuessStatus] = useState(Array(6).fill(Array(5).fill(\"null\"))); // status for each guess\n\n  const [currentGuessIndex, setCurrentGuessIndex] = useState(0); // index for current guess out of 6 guesses\n\n  const [gameWon, setGameWon] = useState(false); // condition for gameWon popup\n  const [gameLost, setGameLost] = useState(false); // condition for gameLost popup\n\n  const [ans, setAns] = useState(Array(5).fill(\"\"));\n  let navigate = useNavigate();\n  const goToHome = () => {\n    navigate('/Home');\n  };\n  useEffect(() => {\n    // Fetch the random word when the component mounts\n    const fetchRandomWord = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/random-word'); // Adjust the URL/port as necessary\n        const data = await response.json();\n        setRandomWord(data.word.toUpperCase()); // Assuming the word is returned in a field named 'word' and convert it to uppercase\n      } catch (error) {\n        console.error(\"Failed to fetch random word:\", error);\n      }\n    };\n    fetchRandomWord();\n  }, []);\n  useEffect(() => {\n    // Adding the keydown event listener when the component mounts\n    const letterTyped = event => {\n      //const ans = [\"W\", \"H\", \"I\", \"L\", \"E\"];  // hard coded in answer, will connect database in future\n      const regex = /^[a-z]$/i; // used to test if keyboard input is a letter\n\n      if (currentGuessIndex < 6)\n        // while guesses are left\n        {\n          const newGuesses = [...guesses];\n          const newGuess = [...newGuesses[currentGuessIndex]];\n          const letterIndex = newGuess.indexOf(\"\");\n          if (regex.test(event.key) && letterIndex !== -1) {\n            newGuess[letterIndex] = event.key.toUpperCase();\n            newGuesses[currentGuessIndex] = newGuess;\n            setGuesses(newGuesses);\n          } else {\n            if (event.key === \"Backspace\" || event.key === \"Delete\") {\n              let delIndex = newGuess.indexOf(\"\");\n\n              // found an empty space, meaning previous index is a letter\n              // don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\n              if (delIndex !== -1 && delIndex !== 0) {\n                newGuess[delIndex - 1] = \"\";\n                newGuesses[currentGuessIndex] = newGuess;\n                setGuesses(newGuesses);\n              } else\n                // no empty space, meaning array is full\n                {\n                  newGuess[4] = \"\"; // delete by replacing last index's letter with a empty string\n                  newGuesses[currentGuessIndex] = newGuess;\n                  setGuesses(newGuesses);\n                }\n            } else if (event.key === \"Enter\") {\n              let index = newGuess.indexOf(\"\");\n              if (index !== -1)\n                // ensure full word is entered before check\n                {\n                  alert(\"Please write a complete word before checking!\");\n                } else if (index === -1) {\n                // Ensure the guess is complet\n\n                // First pass: Mark correct positions as \"correct\"\n                const ansCopy = [...ans]; // Copy of answer for mutable operations\n                const newGuessStatus = [...guessStatus];\n                const status = new Array(5).fill(\"wrong\");\n                for (let i = 0; i < newGuess.length; i++) {\n                  if (newGuess[i] === ans[i]) {\n                    status[i] = \"correct\"; // Mark as correct\n\n                    ansCopy[i] = null; // Remove the matched letter from consideration\n                  }\n                }\n\n                // Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\n                newGuess.forEach((letter, i) => {\n                  if (status[i] !== \"correct\") {\n                    // Skip already correctly matched letters\n                    if (ansCopy.includes(letter)) {\n                      // If letter is present in the answer but not yet matched, it's potentially yellow\n                      // Remove this letter from ansCopy to acknowledge its accounted occurrence\n                      const removeIndex = ansCopy.indexOf(letter);\n                      ansCopy[removeIndex] = null; // Remove from consideration\n\n                      status[i] = \"present\";\n                    } else {\n                      status[i] = \"wrong\";\n                    }\n                  }\n                });\n                newGuessStatus[currentGuessIndex] = status;\n                setGuessStatus(newGuessStatus);\n                let correct = true;\n                newGuess.forEach((letter, i) => {\n                  if (status[i] !== \"correct\") correct = false;\n                });\n                if (correct) {\n                  setGameWon(true);\n                } else {\n                  setCurrentGuessIndex(currentGuessIndex + 1);\n\n                  // Check for game lost condition only after all guesses are made\n                  // and only if the game has not been won\n                  if (currentGuessIndex === 5 && !correct) {\n                    // This delay ensures the state update for gameWon is processed\n                    // before checking and setting gameLost.\n                    setTimeout(() => {\n                      if (!gameWon) setGameLost(true);\n                    }, 0);\n                  }\n                }\n              }\n            }\n          }\n        }\n    };\n    window.addEventListener(\"keydown\", letterTyped);\n\n    // Cleanup function to remove the event listener when the component unmounts\n    return () => {\n      window.removeEventListener(\"keydown\", letterTyped);\n    };\n  }, [guesses, currentGuessIndex, guessStatus, gameWon]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 h-screen flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full flex justify-between items-center pt-3 px-4 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: goToHome,\n        children: \"Return Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white text-4xl font-sans\",\n        children: \"SWEdle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: () => setButtonPopup(true),\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full border-t-4 border-white pt-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center\",\n      children: guesses.map((guess, guessIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center space-x-4 my-2\",\n        children: guess.map((letter, letterIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: ` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${guessStatus[guessIndex][letterIndex] === 'correct' ? 'bg-green-500 scale-110 transition duration-600 ease-in-out' : guessStatus[guessIndex][letterIndex] === 'present' ? 'bg-yellow-500 scale-110 transition duration-600 ease-in-out' : guessStatus[guessIndex][letterIndex] === 'wrong' ? 'bg-red-500 scale-110 transition duration-600 ease-in-out' : 'bg-transparent'}`,\n          children: letter\n        }, letterIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }, this))\n      }, guessIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-24 pb-3 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white font-sans\",\n        children: \"Created by Jonathan Oh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: buttonPopup,\n      setTrigger: setButtonPopup,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl text-white\",\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-white\",\n        children: \"Guess the SWE word in 6 tries. After each guess, press \\\"Enter\\\" and the color of the tiles will change to show how close your guess was to the word. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 201\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \"A green tile indicates a correct letter and correct position: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 115\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: correctImage,\n        alt: \"Correct\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \"A yellow tile indicates a correct letter, but an incorrect position: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 122\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: presentImage,\n        alt: \"Present\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \"A red tile indicates an incorrect letter not found in the answer: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 119\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: wrongImage,\n        alt: \"Wrong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \" Try to match all the tiles to green within 6 tries! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: gameWon,\n      setTrigger: setGameWon,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-2xl text-green-500\",\n        children: \"Congratulations!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-white\",\n        children: \"You have correctly guessed the correct word! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 98\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \"Refresh the website to try again with a different word!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: gameLost,\n      setTrigger: setGameLost,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-2xl text-red-500\",\n        children: \"Game Over!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-white\",\n        children: \"You have used all 6 guesses and were unable to guess the correct word. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 124\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \"Refresh the website to try again with a different word!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"QwSMx3msOdFvFE/81GfRdG0zKLY=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Popup","correctImage","presentImage","wrongImage","use","jsxDEV","_jsxDEV","Game","_s","buttonPopup","setButtonPopup","guesses","setGuesses","Array","fill","guessStatus","setGuessStatus","currentGuessIndex","setCurrentGuessIndex","gameWon","setGameWon","gameLost","setGameLost","ans","setAns","navigate","goToHome","fetchRandomWord","response","fetch","data","json","setRandomWord","word","toUpperCase","error","console","letterTyped","event","regex","newGuesses","newGuess","letterIndex","indexOf","test","key","delIndex","index","alert","ansCopy","newGuessStatus","status","i","length","forEach","letter","includes","removeIndex","correct","setTimeout","window","addEventListener","removeEventListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","guess","guessIndex","trigger","setTrigger","src","alt","_c","$RefreshReg$"],"sources":["/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\"; \nimport correctImage from '../images/correct.png';\nimport presentImage from '../images/present.png';\nimport wrongImage from '../images/wrong.png';\nimport { use } from '../../backend/app';\n\nconst Game = () => {\n\n    const [buttonPopup, setButtonPopup] = useState(false);\n\n    const [guesses, setGuesses] = useState(Array(6).fill(Array(5).fill(\"\")));      // 6 guesses\n    const [guessStatus, setGuessStatus] = useState(Array(6).fill(Array(5).fill(\"null\")));   // status for each guess\n\n    const [currentGuessIndex, setCurrentGuessIndex] = useState(0);  // index for current guess out of 6 guesses\n\n    const [gameWon, setGameWon] = useState(false);      // condition for gameWon popup\n    const [gameLost, setGameLost] = useState(false);    // condition for gameLost popup\n\n    const [ans, setAns] = useState(Array(5).fill(\"\"));\n\n    let navigate = useNavigate();\n    const goToHome = () => {\n        navigate('/Home');\n    };\n\n    useEffect(() => {\n        // Fetch the random word when the component mounts\n        const fetchRandomWord = async () => {\n            try {\n                const response = await fetch('http://localhost:3000/random-word'); // Adjust the URL/port as necessary\n                const data = await response.json();\n                setRandomWord(data.word.toUpperCase()); // Assuming the word is returned in a field named 'word' and convert it to uppercase\n            } catch (error) {\n                console.error(\"Failed to fetch random word:\", error);\n            }\n        };\n\n        fetchRandomWord();\n    }, []);\n    \n    useEffect(() => {\n        // Adding the keydown event listener when the component mounts\n        const letterTyped = (event) => {\n            \n            //const ans = [\"W\", \"H\", \"I\", \"L\", \"E\"];  // hard coded in answer, will connect database in future\n            const regex = /^[a-z]$/i;     // used to test if keyboard input is a letter\n\n            if (currentGuessIndex < 6)  // while guesses are left\n            {\n                const newGuesses = [...guesses];\n                const newGuess = [...newGuesses[currentGuessIndex]];\n                const letterIndex = newGuess.indexOf(\"\");\n\n                if (regex.test(event.key) && letterIndex !== -1) \n                {\n                    newGuess[letterIndex] = event.key.toUpperCase();\n                    newGuesses[currentGuessIndex] = newGuess;\n                    setGuesses(newGuesses);\n                }\n                else\n                {\n                    if (event.key === \"Backspace\" || event.key === \"Delete\") \n                    {\n                        let delIndex = newGuess.indexOf(\"\");\n    \n                        // found an empty space, meaning previous index is a letter\n                        // don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\n                        if (delIndex !== -1 && delIndex !== 0)        \n                        {\n                            newGuess[delIndex - 1] = \"\";\n                            newGuesses[currentGuessIndex] = newGuess;\n                            setGuesses(newGuesses);\n                        }\n                        else            // no empty space, meaning array is full\n                        {\n                            newGuess[4] = \"\";        // delete by replacing last index's letter with a empty string\n                            newGuesses[currentGuessIndex] = newGuess;\n                            setGuesses(newGuesses);\n                        }\n                    }\n                    else if (event.key === \"Enter\") \n                    {\n                        let index = newGuess.indexOf(\"\");\n    \n                        if (index !== -1) // ensure full word is entered before check\n                        {\n                            alert(\"Please write a complete word before checking!\"); \n                        }   \n                        else if (index === -1) { // Ensure the guess is complet\n    \n                            // First pass: Mark correct positions as \"correct\"\n                            const ansCopy = [...ans]; // Copy of answer for mutable operations\n                            const newGuessStatus = [...guessStatus];\n                            const status =  new Array(5).fill(\"wrong\");\n    \n                            for (let i = 0; i < newGuess.length; i++) {\n                                if (newGuess[i] === ans[i]) \n                                {\n                                    status[i] = \"correct\"; // Mark as correct\n    \n                                    ansCopy[i] = null; // Remove the matched letter from consideration\n                                }\n                            }\n                    \n                            // Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\n                            newGuess.forEach((letter, i) => {\n                                if (status[i] !== \"correct\") { // Skip already correctly matched letters\n                                    if (ansCopy.includes(letter)) \n                                    {\n                                        // If letter is present in the answer but not yet matched, it's potentially yellow\n                                        // Remove this letter from ansCopy to acknowledge its accounted occurrence\n                                        const removeIndex = ansCopy.indexOf(letter);\n                                        ansCopy[removeIndex] = null; // Remove from consideration\n    \n                                        status[i] = \"present\"; \n                                    } \n                                    else\n                                    {\n                                        status[i] = \"wrong\";\n                                    }\n                                }\n                            });\n                            \n                            newGuessStatus[currentGuessIndex] = status;\n                            setGuessStatus(newGuessStatus);\n\n                            let correct = true;\n                            newGuess.forEach((letter, i) => {\n                                if (status[i] !== \"correct\") correct = false;\n                            });\n\n                            if (correct) {\n                                setGameWon(true);\n                            } else {\n                                setCurrentGuessIndex(currentGuessIndex + 1);\n                        \n                                // Check for game lost condition only after all guesses are made\n                                // and only if the game has not been won\n                                if (currentGuessIndex === 5 && !correct) {\n                                    // This delay ensures the state update for gameWon is processed\n                                    // before checking and setting gameLost.\n                                    setTimeout(() => {\n                                        if (!gameWon) setGameLost(true);\n                                    }, 0);\n                                }\n                            }\n                        } \n                    }\n                } \n            }\n        };\n\n        window.addEventListener(\"keydown\", letterTyped);\n\n        // Cleanup function to remove the event listener when the component unmounts\n        return () => {\n            window.removeEventListener(\"keydown\", letterTyped);\n        };\n\n    }, [guesses, currentGuessIndex, guessStatus, gameWon]);\n\n    \n    return (\n        <div className=\"bg-gray-900 h-screen flex flex-col\">\n            {/* Header*/}\n            <div className=\"w-full flex justify-between items-center pt-3 px-4 pb-4\">\n                {/* Return Home button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={goToHome}>\n\n                    Return Home\n                </button>\n\n                {/* Game Name */}\n                <h1 className=\"text-white text-4xl font-sans\">SWEdle</h1>\n\n                {/* How to Play button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={() => setButtonPopup(true)}>\n\n                    How to Play\n                </button>\n            </div>\n\n            {/* White line below header */}\n            <div className=\"w-full border-t-4 border-white pt-4\"></div>\n\n            {/* Game content */}\n\n             {/* Game Board for Guesses */}\n            <div className=\"flex flex-col items-center justify-center\">\n                {guesses.map((guess, guessIndex) => (\n                    <div key={guessIndex} className=\"flex justify-center items-center space-x-4 my-2\">\n                        {guess.map((letter, letterIndex) => (\n                            <div key={letterIndex} className={` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${guessStatus[guessIndex][letterIndex] === 'correct' ? 'bg-green-500 scale-110 transition duration-600 ease-in-out' : guessStatus[guessIndex][letterIndex] === 'present' ? 'bg-yellow-500 scale-110 transition duration-600 ease-in-out' :  guessStatus[guessIndex][letterIndex] === 'wrong' ? 'bg-red-500 scale-110 transition duration-600 ease-in-out' : 'bg-transparent'}`}>\n                            {letter}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n\n\n            {/* Additional content */}\n            <div className=\"text-center mt-24 pb-3 w-full\">\n                <p className=\"text-white font-sans\">Created by Jonathan Oh</p>\n            </div>\n\n            {/* Pop-up for How to Play */}\n            <Popup trigger={buttonPopup} setTrigger={setButtonPopup}>\n                <h3 className=\"text-xl text-white\">How to Play</h3>\n                <p className=\"mt-4 text-white\">Guess the SWE word in 6 tries. After each guess, press \"Enter\" and the color of the tiles will change to show how close your guess was to the word. </p> <br></br> \n\n                <p className=\"mt-2 text-white\">A green tile indicates a correct letter and correct position: </p> <br></br>\n                <img src={correctImage} alt=\"Correct\" />\n\n                <p className=\"mt-2 text-white\">A yellow tile indicates a correct letter, but an incorrect position: </p> <br></br>\n                <img src={presentImage} alt=\"Present\" />\n\n                <p className=\"mt-2 text-white\">A red tile indicates an incorrect letter not found in the answer: </p> <br></br>\n                <img src={wrongImage} alt=\"Wrong\" />\n                \n                <p className=\"mt-2 text-white\"> Try to match all the tiles to green within 6 tries! </p>\n\n            </Popup>\n            \n            {/* Pop-up for Game Won */}\n            <Popup trigger={gameWon} setTrigger={setGameWon}>\n                <h3 className=\"text-2xl text-green-500\">Congratulations!</h3>\n                <p className=\"mt-4 text-white\">You have correctly guessed the correct word! </p> <br></br> \n                <p className=\"mt-2 text-white\">Refresh the website to try again with a different word!</p>\n            </Popup>\n\n            {/* Pop-up for Game Lost */}\n            <Popup trigger={gameLost} setTrigger={setGameLost}>\n                <h3 className=\"text-2xl text-red-500\">Game Over!</h3>\n                <p className=\"mt-4 text-white\">You have used all 6 guesses and were unable to guess the correct word. </p> <br></br> \n                <p className=\"mt-2 text-white\">Refresh the website to try again with a different word!</p>\n            </Popup>\n        </div>\n\n    );\n};\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}