{"ast":null,"code":"var _jsxFileName = \"/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [buttonPopup, setButtonPopup] = useState(false);\n  const [guesses, setGuesses] = useState(Array(6).fill(Array(5).fill(\"\"))); // 6 guesses\n  const [guessStatus, setGuessStatus] = useState(Array(6).fill(Array(5).fill(\"null\"))); // status for each guess\n\n  let currentGuessIndex = 0;\n  const ans = [\"A\", \"N\", \"G\", \"I\", \"E\"];\n  let regex = /^[a-z]$/i; // used to test if keyboard input is a letter\n\n  let navigate = useNavigate();\n  const goToHome = () => {\n    navigate('/Home');\n  };\n  useEffect(() => {\n    // Adding the keydown event listener when the component mounts\n    const letterTyped = event => {\n      const newGuesses = [...guesses];\n      const newGuess = [...newGuesses[currentGuessIndex]];\n      if (currentGuessIndex < 6)\n        // while guesses are left\n        {\n          const letterIndex = newGuess.indexOf(\"\");\n          if (regex.test(event.key) && letterIndex !== -1) {\n            newGuess[letterIndex] = event.key.toUpperCase();\n            newGuesses[currentGuessIndex] = newGuess;\n            setGuesses(newGuesses);\n          } else {\n            if (event.key === \"Backspace\" || event.key === \"Delete\") {\n              let delIndex = newGuess.indexOf(\"\");\n\n              // found an empty space, meaning previous index is a letter\n              // don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\n              if (delIndex !== -1 && delIndex !== 0) {\n                newGuess[delIndex - 1] = \"\";\n                newGuesses[currentGuessIndex] = newGuess;\n                setGuesses(newGuesses);\n              } else\n                // no empty space, meaning array is full\n                {\n                  newGuess[4] = \"\"; // delete by replacing last index's letter with a empty string\n                  newGuesses[currentGuessIndex] = newGuess;\n                  setGuesses(newGuesses);\n                }\n            } else if (event.key === \"Enter\") {\n              let index = newGuess.indexOf(\"\");\n              if (index !== -1) {\n                alert(\"Please write a complete word before checking!\");\n              } else {\n                // Ensure the guess is complete\n                const ansCopy = [...ans];\n                let newStatus = Array(5).fill(\"wrong\"); // Default all to wrong initially\n\n                // First pass: Mark correct positions as \"correct\"\n                for (let i = 0; i < newGuess.length; i++) {\n                  if (newGuess[i] === ans[i]) {\n                    newStatus[i] = \"correct\";\n                    ansCopy[i] = null; // Remove the matched letter from consideration\n                  }\n                }\n\n                // Second pass: Adjust for present but wrong spot letters\n                newGuess.forEach((letter, i) => {\n                  if (newStatus[i] !== \"correct\" && ansCopy.includes(letter)) {\n                    // Mark as present if in the answer but not yet matched correctly\n                    newStatus[i] = \"present\";\n                    ansCopy[ansCopy.indexOf(letter)] = null; // Acknowledge its occurrence\n                  }\n                });\n\n                // Update the status for only the current guess\n                const updatedGuessStatus = guessStatus.map((status, idx) => idx === currentGuessIndex ? newStatus : status);\n                setGuessStatus(updatedGuessStatus);\n                // Increment to move to the next guess, ensuring this is done with state if needed\n              }\n            }\n          }\n        } else alert(\"no more guesses\");\n    };\n    window.addEventListener(\"keydown\", letterTyped);\n\n    // Cleanup function to remove the event listener when the component unmounts\n    return () => {\n      window.removeEventListener(\"keydown\", letterTyped);\n    };\n  }, [guesses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 h-screen flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full flex justify-between items-center pt-3 px-4 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: goToHome,\n        children: \"Return Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white text-4xl font-sans\",\n        children: \"SWEdle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: () => setButtonPopup(true),\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full border-t-4 border-white pt-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center justify-center\",\n      children: guesses.map((guess, guessIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center space-x-4 my-2\",\n        children: guess.map((letter, letterIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: ` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${guessStatus[letterIndex] === 'correct' ? 'bg-green-500 scale-110 transition duration-600 ease-in-out' : guessStatus[letterIndex] === 'present' ? 'bg-yellow-500 scale-110 transition duration-600 ease-in-out' : guessStatus[letterIndex] === 'wrong' ? 'bg-red-500 scale-110 transition duration-600 ease-in-out' : 'bg-transparent'}`,\n          children: letter\n        }, letterIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this))\n      }, guessIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-24 pb-3 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white font-sans\",\n        children: \"Created by Jonathan Oh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: buttonPopup,\n      setTrigger: setButtonPopup,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl text-white\",\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-white\",\n        children: \"Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 183\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \" A green tile indicates a correct letter and correct position. A yellow tile indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"HSKKDUahJx3ELcJ8umQrTGFJo6g=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Popup","jsxDEV","_jsxDEV","Game","_s","buttonPopup","setButtonPopup","guesses","setGuesses","Array","fill","guessStatus","setGuessStatus","currentGuessIndex","ans","regex","navigate","goToHome","letterTyped","event","newGuesses","newGuess","letterIndex","indexOf","test","key","toUpperCase","delIndex","index","alert","ansCopy","newStatus","i","length","forEach","letter","includes","updatedGuessStatus","map","status","idx","window","addEventListener","removeEventListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","guess","guessIndex","trigger","setTrigger","_c","$RefreshReg$"],"sources":["/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\"; \n\nconst Game = () => {\n\n    const [buttonPopup, setButtonPopup] = useState(false);\n\n    const [guesses, setGuesses] = useState(Array(6).fill(Array(5).fill(\"\")));      // 6 guesses\n    const [guessStatus, setGuessStatus] = useState(Array(6).fill(Array(5).fill(\"null\")));   // status for each guess\n\n    let currentGuessIndex = 0;\n\n    const ans = [\"A\", \"N\", \"G\", \"I\", \"E\"];\n\n    let regex = /^[a-z]$/i;     // used to test if keyboard input is a letter\n\n    let navigate = useNavigate();\n    const goToHome = () => {\n        navigate('/Home');\n    };\n\n    useEffect(() => {\n        // Adding the keydown event listener when the component mounts\n        const letterTyped = (event) => {\n            \n            const newGuesses = [...guesses];\n            const newGuess = [...newGuesses[currentGuessIndex]];\n            \n            if (currentGuessIndex < 6)  // while guesses are left\n            {\n                const letterIndex = newGuess.indexOf(\"\");\n\n                if (regex.test(event.key) && letterIndex !== -1) \n                {\n                    newGuess[letterIndex] = event.key.toUpperCase();\n                    newGuesses[currentGuessIndex] = newGuess;\n                    setGuesses(newGuesses);\n                }\n                else\n                {\n                    if (event.key === \"Backspace\" || event.key === \"Delete\") \n                    {\n                        let delIndex = newGuess.indexOf(\"\");\n    \n                        // found an empty space, meaning previous index is a letter\n                        // don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\n                        if (delIndex !== -1 && delIndex !== 0)        \n                        {\n                            newGuess[delIndex - 1] = \"\";\n                            newGuesses[currentGuessIndex] = newGuess;\n                            setGuesses(newGuesses);\n                        }\n                        else            // no empty space, meaning array is full\n                        {\n                            newGuess[4] = \"\";        // delete by replacing last index's letter with a empty string\n                            newGuesses[currentGuessIndex] = newGuess;\n                            setGuesses(newGuesses);\n                        }\n                    }\n                    else if (event.key === \"Enter\") {\n                        let index = newGuess.indexOf(\"\");\n                    \n                        if (index !== -1) {\n                            alert(\"Please write a complete word before checking!\");\n                        } else {\n                            // Ensure the guess is complete\n                            const ansCopy = [...ans];\n                            let newStatus = Array(5).fill(\"wrong\"); // Default all to wrong initially\n                    \n                            // First pass: Mark correct positions as \"correct\"\n                            for (let i = 0; i < newGuess.length; i++) {\n                                if (newGuess[i] === ans[i]) {\n                                    newStatus[i] = \"correct\";\n                                    ansCopy[i] = null; // Remove the matched letter from consideration\n                                }\n                            }\n                    \n                            // Second pass: Adjust for present but wrong spot letters\n                            newGuess.forEach((letter, i) => {\n                                if (newStatus[i] !== \"correct\" && ansCopy.includes(letter)) {\n                                    // Mark as present if in the answer but not yet matched correctly\n                                    newStatus[i] = \"present\";\n                                    ansCopy[ansCopy.indexOf(letter)] = null; // Acknowledge its occurrence\n                                }\n                            });\n                    \n                            // Update the status for only the current guess\n                            const updatedGuessStatus = guessStatus.map((status, idx) => \n                                idx === currentGuessIndex ? newStatus : status\n                            );\n                    \n                            setGuessStatus(updatedGuessStatus);\n                            // Increment to move to the next guess, ensuring this is done with state if needed\n                        }\n                    }\n                    \n                }\n                \n            }\n            else alert(\"no more guesses\");\n        };\n\n\n        window.addEventListener(\"keydown\", letterTyped);\n\n        // Cleanup function to remove the event listener when the component unmounts\n        return () => {\n            window.removeEventListener(\"keydown\", letterTyped);\n        };\n\n    }, [guesses]);\n\n    \n    return (\n        <div className=\"bg-gray-900 h-screen flex flex-col\">\n            {/* Header*/}\n            <div className=\"w-full flex justify-between items-center pt-3 px-4 pb-4\">\n                {/* Return Home button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={goToHome}>\n\n                    Return Home\n                </button>\n\n                {/* Game Name */}\n                <h1 className=\"text-white text-4xl font-sans\">SWEdle</h1>\n\n                {/* How to Play button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={() => setButtonPopup(true)}>\n\n                    How to Play\n                </button>\n            </div>\n\n            {/* White line below header */}\n            <div className=\"w-full border-t-4 border-white pt-4\"></div>\n\n            {/* Game content */}\n\n             {/* Game Board for Guesses */}\n            <div className=\"flex flex-col items-center justify-center\">\n                {guesses.map((guess, guessIndex) => (\n                    <div key={guessIndex} className=\"flex justify-center items-center space-x-4 my-2\">\n                        {guess.map((letter, letterIndex) => (\n                            <div key={letterIndex} className={` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${guessStatus[letterIndex] === 'correct' ? 'bg-green-500 scale-110 transition duration-600 ease-in-out' : guessStatus[letterIndex] === 'present' ? 'bg-yellow-500 scale-110 transition duration-600 ease-in-out' :  guessStatus[letterIndex] === 'wrong' ? 'bg-red-500 scale-110 transition duration-600 ease-in-out' : 'bg-transparent'}`}>\n                            {letter}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n\n\n            {/* Additional content */}\n            <div className=\"text-center mt-24 pb-3 w-full\">\n                <p className=\"text-white font-sans\">Created by Jonathan Oh</p>\n            </div>\n\n            {/* Pop-up for How to Play */}\n            <Popup trigger={buttonPopup} setTrigger={setButtonPopup}>\n                <h3 className=\"text-xl text-white\">How to Play</h3>\n                <p className=\"mt-4 text-white\">Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. </p> <br></br> \n                <p className=\"mt-2 text-white\"> A green tile indicates a correct letter and correct position. A yellow tile\n                indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.</p>\n            </Popup>\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}