{"ast":null,"code":"var _jsxFileName = \"/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [buttonPopup, setButtonPopup] = useState(false);\n  const [word, setWord] = useState([\"\", \"\", \"\", \"\", \"\"]); // 5 letter spots\n  const [wordStatus, setWordStatus] = useState(Array(5).fill(\"null\"));\n  const [guesses, setGuesses] = useState(Array(6).fill(Array(5).fill(\"\"))); // 6 guesses\n  const [guessStatus, setGuessStatus] = useState(Array(6).fill(Array(5).fill(\"\"))); // status for each guess\n\n  const letters = [26];\n  const ans = [\"A\", \"N\", \"G\", \"I\", \"E\"];\n  let regex = /^[a-z]$/i; // used to test if keyboard input is a letter\n\n  let navigate = useNavigate();\n  const goToHome = () => {\n    navigate('/Home');\n  };\n  useEffect(() => {\n    // Adding the keydown event listener when the component mounts\n    const letterTyped = event => {\n      const currentGuessIndex = guesses.findIndex(guess => guess.includes(\"\"));\n      const newGuesses = [...guesses];\n      const newGuess = [...newGuesses[currentGuessIndex]];\n      if (regex.test(event.key)) {\n        if (currentGuessIndex !== -1)\n          // may need to put before if (regex.test...) \n          {\n            const letterIndex = newGuess.indexOf(\"\");\n            if (letterIndex !== -1) {\n              newGuess[letterIndex] = event.key.toUpperCase();\n              newGuesses[currentGuessIndex] = newGuess;\n              setGuesses(newGuesses);\n            }\n          }\n      } else if (event.key === \"Backspace\" || event.key === \"Delete\") {\n        let delIndex = newGuess.indexOf(\"\");\n\n        // found an empty space, meaning previous index is a letter\n        // don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\n        if (delIndex !== -1 && delIndex !== 0) {\n          newGuess[delIndex - 1] = \"\";\n          newGuesses[currentGuessIndex] = newGuess;\n          setGuesses(newGuesses);\n        } else\n          // no empty space, meaning array is full\n          {\n            newGuess[4] = \"\"; // delete by replacing last index's letter with a empty string\n            newGuesses[currentGuessIndex] = newGuess;\n            setGuesses(newGuesses);\n          }\n      } else if (event.key === \"Enter\") {\n        let index = word.indexOf(\"\");\n        if (index !== -1) alert(\"Please write a complete word before checking!\"); // ensure full word is entered before check\n        else if (index === -1) {\n          // Ensure the guess is complete\n\n          // First pass: Mark correct positions as \"correct\"\n          const ansCopy = [...ans]; // Copy of answer for mutable operations\n          const status = [...wordStatus];\n          for (let i = 0; i < word.length; i++) {\n            if (word[i] === ans[i]) {\n              status[i] = \"correct\"; // Mark as correct\n              setWordStatus(status);\n              ansCopy[i] = null; // Remove the matched letter from consideration\n            }\n          }\n\n          // Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\n          word.forEach((letter, i) => {\n            if (status[i] !== \"correct\") {\n              // Skip already correctly matched letters\n              if (ansCopy.includes(letter)) {\n                // If letter is present in the answer but not yet matched, it's potentially yellow\n                // Remove this letter from ansCopy to acknowledge its accounted occurrence\n                const removeIndex = ansCopy.indexOf(letter);\n                ansCopy[removeIndex] = null; // Remove from consideration\n\n                status[i] = \"present\";\n                setWordStatus(status);\n              } else {\n                status[i] = \"wrong\";\n                setWordStatus(status);\n              }\n            }\n          });\n        }\n      }\n    };\n    window.addEventListener(\"keydown\", letterTyped);\n\n    // Cleanup function to remove the event listener when the component unmounts\n    return () => {\n      window.removeEventListener(\"keydown\", letterTyped);\n    };\n  }, [word]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 h-screen flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full flex justify-between items-center pt-3 px-4 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: goToHome,\n        children: \"Return Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white text-4xl font-sans\",\n        children: \"SWEdle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\",\n        onClick: () => setButtonPopup(true),\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full border-t-4 border-white pt-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center space-x-4 mt-8 pt-3 pb-4\",\n      children: word.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: ` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${wordStatus[index] === 'correct' ? 'bg-green-500 scale-110 transition duration-600 ease-in-out' : wordStatus[index] === 'present' ? 'bg-yellow-500 scale-110 transition duration-600 ease-in-out' : wordStatus[index] === 'wrong' ? 'bg-red-500 scale-110 transition duration-600 ease-in-out' : 'bg-transparent'}`,\n        children: letter\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-24 pb-3 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white font-sans\",\n        children: \"Created by Jonathan Oh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      trigger: buttonPopup,\n      setTrigger: setButtonPopup,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl text-white\",\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-white\",\n        children: \"Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 183\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 text-white\",\n        children: \" A green tile indicates a correct letter and correct position. A yellow tile indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"BzVF/WymYb9tNsoIupVplgVB1ZU=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Popup","jsxDEV","_jsxDEV","Game","_s","buttonPopup","setButtonPopup","word","setWord","wordStatus","setWordStatus","Array","fill","guesses","setGuesses","guessStatus","setGuessStatus","letters","ans","regex","navigate","goToHome","letterTyped","event","currentGuessIndex","findIndex","guess","includes","newGuesses","newGuess","test","key","letterIndex","indexOf","toUpperCase","delIndex","index","alert","ansCopy","status","i","length","forEach","letter","removeIndex","window","addEventListener","removeEventListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","trigger","setTrigger","_c","$RefreshReg$"],"sources":["/Users/jonathan/Desktop/Developer/SWEdle/src/pages/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport Popup from \"../components/Popup\"; \n\nconst Game = () => {\n\n    const [buttonPopup, setButtonPopup] = useState(false);\n    const [word, setWord] = useState([\"\", \"\", \"\", \"\", \"\"]);         // 5 letter spots\n    const [wordStatus, setWordStatus] = useState(Array(5).fill(\"null\"));\n\n    const [guesses, setGuesses] = useState(Array(6).fill(Array(5).fill(\"\")));      // 6 guesses\n    const [guessStatus, setGuessStatus] = useState(Array(6).fill(Array(5).fill(\"\")));   // status for each guess\n\n    const letters = [26];\n    const ans = [\"A\", \"N\", \"G\", \"I\", \"E\"];\n\n    let regex = /^[a-z]$/i;     // used to test if keyboard input is a letter\n\n    let navigate = useNavigate();\n    const goToHome = () => {\n        navigate('/Home');\n    };\n\n    useEffect(() => {\n        // Adding the keydown event listener when the component mounts\n        const letterTyped = (event) => {\n            const currentGuessIndex = guesses.findIndex(guess => guess.includes(\"\"));\n            const newGuesses = [...guesses];\n            const newGuess = [...newGuesses[currentGuessIndex]];\n            \n            if (regex.test(event.key)) \n            {\n                if (currentGuessIndex !== -1)   // may need to put before if (regex.test...) \n                {\n                    const letterIndex = newGuess.indexOf(\"\");\n\n                    if (letterIndex !== -1)\n                    {\n                        newGuess[letterIndex] = event.key.toUpperCase();\n                        newGuesses[currentGuessIndex] = newGuess;\n                        setGuesses(newGuesses);\n                    }\n                }\n                \n            }\n            else if (event.key === \"Backspace\" || event.key === \"Delete\") \n            {\n                let delIndex = newGuess.indexOf(\"\");\n\n                // found an empty space, meaning previous index is a letter\n                // don't check delIndex = 0 to prevent idx out of bounds, + empty at 0 means empty array\n                if (delIndex !== -1 && delIndex !== 0)        \n                {\n                    newGuess[delIndex - 1] = \"\";\n                    newGuesses[currentGuessIndex] = newGuess;\n                    setGuesses(newGuesses);\n                }\n                else            // no empty space, meaning array is full\n                {\n                    newGuess[4] = \"\";        // delete by replacing last index's letter with a empty string\n                    newGuesses[currentGuessIndex] = newGuess;\n                    setGuesses(newGuesses);\n                }\n            }\n            else if (event.key === \"Enter\") {\n                let index = word.indexOf(\"\");\n\n                if (index !== -1) alert(\"Please write a complete word before checking!\");    // ensure full word is entered before check\n                else if (index === -1) { // Ensure the guess is complete\n                    \n            \n                    // First pass: Mark correct positions as \"correct\"\n                    const ansCopy = [...ans]; // Copy of answer for mutable operations\n                    const status = [...wordStatus];\n\n                    for (let i = 0; i < word.length; i++) {\n                        if (word[i] === ans[i]) \n                        {\n                            status[i] = \"correct\"; // Mark as correct\n                            setWordStatus(status);\n\n                            ansCopy[i] = null; // Remove the matched letter from consideration\n                        }\n                    }\n            \n                    // Second pass: Find present but wrong spot letters based on unmatched letters and their frequency\n                    word.forEach((letter, i) => {\n                        if (status[i] !== \"correct\") { // Skip already correctly matched letters\n                            if (ansCopy.includes(letter)) \n                            {\n                                // If letter is present in the answer but not yet matched, it's potentially yellow\n                                // Remove this letter from ansCopy to acknowledge its accounted occurrence\n                                const removeIndex = ansCopy.indexOf(letter);\n                                ansCopy[removeIndex] = null; // Remove from consideration\n\n                                status[i] = \"present\"; \n                                setWordStatus(status);\n                            } \n                            else\n                            {\n                                status[i] = \"wrong\";\n                                setWordStatus(status);\n                            }\n                        }\n                    });\n                }\n            }\n        };\n\n        window.addEventListener(\"keydown\", letterTyped);\n\n        // Cleanup function to remove the event listener when the component unmounts\n        return () => {\n            window.removeEventListener(\"keydown\", letterTyped);\n        };\n\n    }, [word]);\n\n\n    return (\n        <div className=\"bg-gray-900 h-screen flex flex-col\">\n            {/* Header*/}\n            <div className=\"w-full flex justify-between items-center pt-3 px-4 pb-4\">\n                {/* Return Home button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={goToHome}>\n\n                    Return Home\n                </button>\n\n                {/* Game Name */}\n                <h1 className=\"text-white text-4xl font-sans\">SWEdle</h1>\n\n                {/* How to Play button */}\n                <button \n                    className=\"hover:scale-110 bg-white bg-opacity-25 text-white py-2 px-4 rounded transition duration-300 ease-in-out hover:bg-white hover:text-black focus:outline-none\" \n                    onClick={() => setButtonPopup(true)}>\n\n                    How to Play\n                </button>\n            </div>\n\n            {/* White line below header */}\n            <div className=\"w-full border-t-4 border-white pt-4\"></div>\n\n            {/* Game content */}\n\n            {/* Row for Guess 1 */}\n            <div className=\"flex justify-center items-center space-x-4 mt-8 pt-3 pb-4\">\n                {word.map((letter, index) => (\n                    <div key={index} className={` text-white border-2 h-16 w-16 flex justify-center items-center text-4xl ${wordStatus[index] === 'correct' ? 'bg-green-500 scale-110 transition duration-600 ease-in-out' : wordStatus[index] === 'present' ? 'bg-yellow-500 scale-110 transition duration-600 ease-in-out' :  wordStatus[index] === 'wrong' ? 'bg-red-500 scale-110 transition duration-600 ease-in-out' : 'bg-transparent'}`}>\n                        {letter}\n                    </div>\n                ))}\n            </div>\n\n\n\n            {/* Additional content */}\n            <div className=\"text-center mt-24 pb-3 w-full\">\n                <p className=\"text-white font-sans\">Created by Jonathan Oh</p>\n            </div>\n\n            {/* Pop-up for How to Play */}\n            <Popup trigger={buttonPopup} setTrigger={setButtonPopup}>\n                <h3 className=\"text-xl text-white\">How to Play</h3>\n                <p className=\"mt-4 text-white\">Guess the SWE word in 6 tries. After each guess, the color of the tiles will change to show how close your guess was to the word. </p> <br></br> \n                <p className=\"mt-2 text-white\"> A green tile indicates a correct letter and correct position. A yellow tile\n                indicates a correct letter, but an incorrect position. A grey tile indicates an incorrect letter that won't be in the word.</p>\n            </Popup>\n        </div>\n    );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}